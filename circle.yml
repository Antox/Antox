machine:
  timezone:
    Europe/Vienna
  java:
    version: oraclejdk8
  environment:
    ZEMU_: "appemu23"
    EMU_: "appemu21"
    XEMU_: "appemu10"
    Zsdpath: "/sdcard"
    sdpath: "/storage/sdcard"
    Xsdpath: "/mnt/sdcard"
    ANDROID_HOME: /usr/local/android-sdk-linux
    ANDROID_SDK: /usr/local/android-sdk-linux/
    _SDK_: /usr/local/android-sdk-linux/
    GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1000m -XX:+HeapDumpOnOutOfMemoryError"'
    SBT_OPTS: "-Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M"
    CLASS_P: chat.tox.antox
    START_INTENT_P: chat.tox.antox.activities.LoginActivity
    DEBIAN_FRONTEND: noninteractive
dependencies:
  cache_directories:
    - ~/.android
    - ~/.gradle
  override:
    - echo "dummy"
  pre:
    - sudo apt-get update > /dev/null 2> /dev/null
    - sudo apt-get install xvfb > /dev/null 2> /dev/null
    - sudo apt-get install xdotool > /dev/null 2> /dev/null
    - sudo apt-get install telnet > /dev/null 2> /dev/null
    - sudo apt-get install x11-utils > /dev/null 2> /dev/null
    - sudo apt-get install xvkbd > /dev/null 2> /dev/null
    - sudo apt-get install qrencode > /dev/null 2> /dev/null

    - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 749D6EEC0353B12C
    - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F76221572C52609D
    - sudo apt-get update
    - sudo bash -c 'cd /etc/apt/sources.list.d; echo "deb http://old-releases.ubuntu.com/ubuntu/ raring main restricted universe multiverse" >ia32-libs-raring.list'
    - sudo apt-get update
    - sudo apt-get install libncurses-dev
    - sudo apt-get install lib32ncurses5-dev

    - mkdir -p "/home/ubuntu/.sbt/.lib/0.13.12/"
    - wget http://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.12/sbt-launch.jar -O "/home/ubuntu/.sbt/.lib/0.13.12/sbt-launch.jar"

    - sudo apt-get install libdevel-trace-perl
    #- sudo apt-get install clang-3.5
    - sudo apt-get install clang
    - sudo apt-get install p7zip-full

    #- sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100
    #- sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100

    - gradle -v # display gradle version
    - echo y | android update sdk --no-ui --all --filter "tools"
    - android list sdk --all | grep -i tools
    - android list sdk --all --extended

    - echo y | android update sdk --no-ui --all --filter build-tools-23.0.3 > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter android-23 > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter platform-tools > /dev/null 2> /dev/null

    - echo y | android update sdk --no-ui --all --filter extra-android-m2repository > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter extra-google-m2repository > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter extra-android-support > /dev/null 2> /dev/null

    - echo y | android update sdk --no-ui --all --filter platform-tools-preview > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-23 > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-addon-google_apis-google-23 > /dev/null 2> /dev/null
    - echo y | android update sdk --no-ui --all --filter addon-google_apis-google-23 > /dev/null 2> /dev/null

# ------- install missing NDK ----------
    - wget -O ~/zandroid-ndk.sh 'https://raw.githubusercontent.com/zoff99/circleCI_android_template/master/android-ndk.sh'
    - printf 'export NDK_VERSION=r13b\n. ~/zandroid-ndk.sh && install_android_ndk\n' | sudo bash
# ------- install missing NDK ----------

    - pwd ; ls -al

    - ./download-dependencies.sh

    - git submodule init
    - git submodule update

# ------ build libsodiumjni.so ------
    - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F76221572C52609D
    - sudo apt-get update
    - sudo apt-get install build-essential libtool autotools-dev automake checkinstall check git yasm
    - sudo apt-get install libopus-dev libvpx-dev pkg-config
    - cd libsodium-jni/ ; git submodule init
    - cd libsodium-jni/ ; git submodule update
    - cd libsodium-jni/ ; ./dependencies-linux.sh
    - cd libsodium-jni/ ; ./build.sh
    - cd libsodium-jni/ ; ./build-kaliumjni.sh
    - cd libsodium-jni/ ; ./build-libsodiumjni.sh
    - find ~/ -name 'libsodiumjni.so' -exec ls -al {} \; ; exit 0
    - find ~/ -name 'libsodiumjni.so' -exec file {} \; ; exit 0
    # ---- copy libraries to Antox folder ----
    - mkdir -p $CIRCLE_ARTIFACTS/armeabi/
    - mkdir -p $CIRCLE_ARTIFACTS/armeabi-v7a/
    - mkdir -p $CIRCLE_ARTIFACTS/x86/
    - cp -v libsodium-jni/libs/armeabi/libsodiumjni.so $CIRCLE_ARTIFACTS/armeabi/
    - cp -v libsodium-jni/libs/armeabi-v7a/libsodiumjni.so $CIRCLE_ARTIFACTS/armeabi-v7a/
    - cp -v libsodium-jni/libs/x86/libsodiumjni.so $CIRCLE_ARTIFACTS/x86/

    - cp -v libsodium-jni/libs/armeabi/libsodiumjni.so app/src/main/jniLibs/armeabi/
    #- cp -v libsodium-jni/libs/arm64-v8a/libsodiumjni.so app/src/main/jniLibs/arm64-v8a/
    - mkdir -p app/src/main/jniLibs/armeabi-v7a/    
    - cp -v libsodium-jni/libs/armeabi-v7a/libsodiumjni.so app/src/main/jniLibs/armeabi-v7a/
    - cp -v libsodium-jni/libs/x86/libsodiumjni.so app/src/main/jniLibs/x86/
    #- mkdir -p app/src/main/jniLibs/mips/    
    #- cp -v libsodium-jni/libs/mips/libsodiumjni.so app/src/main/jniLibs/mips/
    # ---- copy libraries to Antox folder ----
# ------ build libsodiumjni.so ------

# ------ build and install toxcore and toxav ----
    - sudo apt-get install build-essential libtool autotools-dev automake checkinstall check git yasm
    - sudo apt-get install libopus-dev libvpx-dev pkg-config
    - mkdir toxcore
    - cd toxcore ; git clone https://github.com/TokTok/c-toxcore.git
    - cd toxcore ; cd c-toxcore ; git checkout 'v0.1.2'

    ### ------- get libsodium -------
    - cd toxcore ; cd c-toxcore ; mkdir ./libsodium
    - cd toxcore ; cd c-toxcore ; cd ./libsodium/ ; git clone https://github.com/jedisct1/libsodium.git
    - cd toxcore ; cd c-toxcore ; cd ./libsodium/ ; cd libsodium/ ; git checkout '1.0.11'
    - cd toxcore ; cd c-toxcore ; cd ./libsodium/ ; cd libsodium/ ; ./autogen.sh
    - cd toxcore ; cd c-toxcore ; cd ./libsodium/ ; cd libsodium/ ; ./configure && make check
    - cd toxcore ; cd c-toxcore ; cd ./libsodium/ ; cd libsodium/ ; sudo bash -c "printf 'y\naa\n\n' | checkinstall --install --pkgname libsodium --pkgversion 1.0.0 --nodoc --deldesc=no --pkglicense='GPL2'"
    - cd toxcore ; cd c-toxcore ; cd ./libsodium/ ; cd libsodium/ ; sudo ldconfig
    ### ------- get libsodium -------

##### ------------ BUILD ------------
    - cd toxcore ; cd c-toxcore ; cmake -DWARNINGS=OFF .
    #- cmake .
    - cd toxcore ; cd c-toxcore ; make
    - cd toxcore ; cd c-toxcore ; sudo make install
    - sudo ldconfig
##### ------------ BUILD ------------
# ------ build and install toxcore and toxav ----


# ------ build tox4j stuff ----------
    - sudo apt-get install check libcv-dev libhighgui-dev libopencv-contrib-dev libsndfile1-dev libvpx-dev opam portaudio19-dev texinfo
    - cd jvm-toxcore-c/ ; pwd
    - cd jvm-toxcore-c/ ; git submodule init ; exit 0
    - cd jvm-toxcore-c/ ; git submodule update ; exit 0
    - cd jvm-toxcore-c/ ; git checkout pr8 # use PR8 stuff now

    - sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100
    - sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100

    - wget www.scala-lang.org/files/archive/scala-2.11.7.deb -O ~/scala-2.11.7.deb
    - cd ~ ; sudo dpkg -i scala-2.11.7.deb
    - mkdir -p ~/cache
    - mkdir -p ~/.casher

    - cd jvm-toxcore-c/ ; export CASHER_DIR=$HOME/.casher ; export CACHE_DIR=~/cache ; export TARGET=arm-linux-androideabi ; export NDK_HOME=~/android-ndk ; buildscripts/00_dependencies_host ; exit 0
    - cd jvm-toxcore-c/ ; export CASHER_DIR=$HOME/.casher ; export CACHE_DIR=~/cache ; export TARGET=arm-linux-androideabi ; export NDK_HOME=~/android-ndk ; buildscripts/01_ndk ; exit 0
    - cd jvm-toxcore-c/ ; export CASHER_DIR=$HOME/.casher ; export CACHE_DIR=~/cache ; export TARGET=arm-linux-androideabi ; export NDK_HOME=~/android-ndk ; buildscripts/02_toolchain ; exit 0
    - cd jvm-toxcore-c/ ; export CASHER_DIR=$HOME/.casher ; export CACHE_DIR=~/cache ; export TARGET=arm-linux-androideabi ; export NDK_HOME=~/android-ndk ; buildscripts/03_dependencies_target ; exit 0
    - cd jvm-toxcore-c/ ; export CASHER_DIR=$HOME/.casher ; export CACHE_DIR=~/cache ; export TARGET=arm-linux-androideabi ; export NDK_HOME=~/android-ndk ; buildscripts/04_build ; exit 0
    #- cd jvm-toxcore-c/ ; export NDK_HOME=~/android-ndk ; buildscripts/05_android ; exit 0
    #- cd jvm-toxcore-c/ ; make

    - sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 100
    - sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 100

    # ---- copy jar to Antox folder ----------
    - rm -Rf app/src/main/protobuf/ ; exit 0
    - rm -Rf app/src/main/java/im/ ; exit 0
    - find jvm-toxcore-c/ -name 'tox4j*jar' -exec ls -hal {} \; ; exit 0
    - find ~ -name 'tox4j*' -exec ls -al {} \; 2>&1| grep -i jar ; exit 0
    - find ~ -name 'tox4j*jar' > ~/jars.txt ; exit 0
    - zip $CIRCLE_ARTIFACTS/tox4j_jars.zip "$(cat ~/jars.txt)" ; exit 0
    - find ~ -name 'tox4j*.jar' -exec unzip -t {} \; ; exit 0

    - find ~ -name 'libtox4j*' -exec ls -al {} \; 2>&1| grep -i \.so ; exit 0

    - cp -v ./jvm-toxcore-c/target/scala-2.11/tox4j-c_2.11-0.1.0-SNAPSHOT.jar app/libs/tox4j_2.11.jar ; exit 0
    - cp -v ./jvm-toxcore-c/target/scala-2.11/tox4j-c_2.11-0.1.0-SNAPSHOT.jar $CIRCLE_ARTIFACTS/tox4j_2.11.jar ; exit 0
    - cp -v ./jvm-toxcore-c/target/scala-2.11/tox4j*.jar $CIRCLE_ARTIFACTS/ ; exit 0
    # ---- copy jar to Antox folder ----------
    # ---- copy libraries to Antox folder ----
    # cp -av libtox4j.so app/src/main/jniLibs/armeabi/libtox4j.so
    # cp -av libtox4j.so app/src/main/jniLibs/armeabi-v7a/libtox4j.so
    # mkdir -p app/src/main/jniLibs/arm64-v8a
    # cp -av libtox4j.so app/src/main/jniLibs/arm64-v8a/libtox4j.so
    # cp -av libtox4j.so app/src/main/jniLibs/x86/libtox4j.so
    # ---- copy libraries to Antox folder ----
# ------ build tox4j stuff ----------

    - cat app/build.gradle | grep 'useCompileDaemon' ; exit 0
    - sed -i -e 's#scalaCompileOptions.useCompileDaemon = true#scalaCompileOptions.useCompileDaemon = false#' app/build.gradle ; exit 0
    - cat app/build.gradle | grep 'useCompileDaemon' ; exit 0

    - ./gradlew build -x lint; exit 0 # first build will FAIL !!
    - ./gradlew assembleDebug --stacktrace --info --no-daemon ; exit 0 # remove exit 0 later!!
    - ls -al app/build/outputs/apk/ ; exit 0

test:
  pre:
    - echo "dummy"
  override:
    - echo "dummy"
